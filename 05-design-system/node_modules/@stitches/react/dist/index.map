{
  "version": 3,
  "sources": ["../../core/src/default/defaultThemeMap.js", "../../core/src/utility/createMemo.js", "../../core/src/utility/internal.js", "../../core/src/utility/define.js", "../../core/src/utility/hasNames.js", "../../core/src/utility/hasOwn.js", "../../core/src/convert/toCamelCase.js", "../../core/src/convert/toHyphenCase.js", "../../core/src/convert/toPolyfilledValue.js", "../../core/src/convert/toResolvedMediaQueryRanges.js", "../../core/src/convert/toResolvedSelectors.js", "../../core/src/convert/toSizingValue.js", "../../core/src/convert/toTailDashed.js", "../../core/src/convert/toTokenizedValue.js", "../../core/src/convert/toCssRules.js", "../../core/src/convert/toHash.js", "../../core/src/sheet.js", "../../core/src/features/css.js", "../../core/src/features/globalCss.js", "../../core/src/features/keyframes.js", "../../core/src/ThemeToken.js", "../../core/src/features/createTheme.js", "../../core/src/createStitches.js", "../src/features/styled.js", "../src/createStitches.js", "../src/utility/getCachedConfig.js", "../src/index.js"],
  "sourcesContent": ["const borderStyles = 'borderStyles'\nconst borderWidths = 'borderWidths'\nconst colors = 'colors'\nconst fonts = 'fonts'\nconst fontSizes = 'fontSizes'\nconst fontWeights = 'fontWeights'\nconst letterSpacings = 'letterSpacings'\nconst lineHeights = 'lineHeights'\nconst radii = 'radii'\nconst shadows = 'shadows'\nconst sizes = 'sizes'\nconst space = 'space'\nconst transitions = 'transitions'\nconst zIndices = 'zIndices'\n\n/** @type {DefaultThemeMap} */\nexport const defaultThemeMap = {\n\tgap: space,\n\tgridGap: space,\n\tcolumnGap: space,\n\tgridColumnGap: space,\n\trowGap: space,\n\tgridRowGap: space,\n\tinset: space,\n\tinsetBlock: space,\n\tinsetBlockEnd: space,\n\tinsetBlockStart: space,\n\tinsetInline: space,\n\tinsetInlineEnd: space,\n\tinsetInlineStart: space,\n\tmargin: space,\n\tmarginTop: space,\n\tmarginRight: space,\n\tmarginBottom: space,\n\tmarginLeft: space,\n\tmarginBlock: space,\n\tmarginBlockEnd: space,\n\tmarginBlockStart: space,\n\tmarginInline: space,\n\tmarginInlineEnd: space,\n\tmarginInlineStart: space,\n\tpadding: space,\n\tpaddingTop: space,\n\tpaddingRight: space,\n\tpaddingBottom: space,\n\tpaddingLeft: space,\n\tpaddingBlock: space,\n\tpaddingBlockEnd: space,\n\tpaddingBlockStart: space,\n\tpaddingInline: space,\n\tpaddingInlineEnd: space,\n\tpaddingInlineStart: space,\n\ttop: space,\n\tright: space,\n\tbottom: space,\n\tleft: space,\n\tscrollMargin: space,\n\tscrollMarginTop: space,\n\tscrollMarginRight: space,\n\tscrollMarginBottom: space,\n\tscrollMarginLeft: space,\n\tscrollMarginX: space,\n\tscrollMarginY: space,\n\tscrollMarginBlock: space,\n\tscrollMarginBlockEnd: space,\n\tscrollMarginBlockStart: space,\n\tscrollMarginInline: space,\n\tscrollMarginInlineEnd: space,\n\tscrollMarginInlineStart: space,\n\tscrollPadding: space,\n\tscrollPaddingTop: space,\n\tscrollPaddingRight: space,\n\tscrollPaddingBottom: space,\n\tscrollPaddingLeft: space,\n\tscrollPaddingX: space,\n\tscrollPaddingY: space,\n\tscrollPaddingBlock: space,\n\tscrollPaddingBlockEnd: space,\n\tscrollPaddingBlockStart: space,\n\tscrollPaddingInline: space,\n\tscrollPaddingInlineEnd: space,\n\tscrollPaddingInlineStart: space,\n\n\tfontSize: fontSizes,\n\n\tbackground: colors,\n\tbackgroundColor: colors,\n\tbackgroundImage: colors,\n\tborderImage: colors,\n\tborder: colors,\n\tborderBlock: colors,\n\tborderBlockEnd: colors,\n\tborderBlockStart: colors,\n\tborderBottom: colors,\n\tborderBottomColor: colors,\n\tborderColor: colors,\n\tborderInline: colors,\n\tborderInlineEnd: colors,\n\tborderInlineStart: colors,\n\tborderLeft: colors,\n\tborderLeftColor: colors,\n\tborderRight: colors,\n\tborderRightColor: colors,\n\tborderTop: colors,\n\tborderTopColor: colors,\n\tcaretColor: colors,\n\tcolor: colors,\n\tcolumnRuleColor: colors,\n\tfill: colors,\n\toutline: colors,\n\toutlineColor: colors,\n\tstroke: colors,\n\ttextDecorationColor: colors,\n\n\tfontFamily: fonts,\n\n\tfontWeight: fontWeights,\n\n\tlineHeight: lineHeights,\n\n\tletterSpacing: letterSpacings,\n\n\tblockSize: sizes,\n\tminBlockSize: sizes,\n\tmaxBlockSize: sizes,\n\tinlineSize: sizes,\n\tminInlineSize: sizes,\n\tmaxInlineSize: sizes,\n\twidth: sizes,\n\tminWidth: sizes,\n\tmaxWidth: sizes,\n\theight: sizes,\n\tminHeight: sizes,\n\tmaxHeight: sizes,\n\tflexBasis: sizes,\n\tgridTemplateColumns: sizes,\n\tgridTemplateRows: sizes,\n\n\tborderWidth: borderWidths,\n\tborderTopWidth: borderWidths,\n\tborderRightWidth: borderWidths,\n\tborderBottomWidth: borderWidths,\n\tborderLeftWidth: borderWidths,\n\n\tborderStyle: borderStyles,\n\tborderTopStyle: borderStyles,\n\tborderRightStyle: borderStyles,\n\tborderBottomStyle: borderStyles,\n\tborderLeftStyle: borderStyles,\n\n\tborderRadius: radii,\n\tborderTopLeftRadius: radii,\n\tborderTopRightRadius: radii,\n\tborderBottomRightRadius: radii,\n\tborderBottomLeftRadius: radii,\n\n\tboxShadow: shadows,\n\ttextShadow: shadows,\n\n\ttransition: transitions,\n\n\tzIndex: zIndices,\n}\n\n/**\n * @typedef {Object} DefaultThemeMap\n * @property {space} gap\n * @property {space} gridGap\n * @property {space} columnGap\n * @property {space} gridColumnGap\n * @property {space} rowGap\n * @property {space} gridRowGap\n * @property {space} inset\n * @property {space} insetBlock\n * @property {space} insetBlockEnd\n * @property {space} insetBlockStart\n * @property {space} insetInline\n * @property {space} insetInlineEnd\n * @property {space} insetInlineStart\n * @property {space} margin\n * @property {space} marginTop\n * @property {space} marginRight\n * @property {space} marginBottom\n * @property {space} marginLeft\n * @property {space} marginBlock\n * @property {space} marginBlockEnd\n * @property {space} marginBlockStart\n * @property {space} marginInline\n * @property {space} marginInlineEnd\n * @property {space} marginInlineStart\n * @property {space} padding\n * @property {space} paddingTop\n * @property {space} paddingRight\n * @property {space} paddingBottom\n * @property {space} paddingLeft\n * @property {space} paddingBlock\n * @property {space} paddingBlockEnd\n * @property {space} paddingBlockStart\n * @property {space} paddingInline\n * @property {space} paddingInlineEnd\n * @property {space} paddingInlineStart\n * @property {space} top\n * @property {space} right\n * @property {space} bottom\n * @property {space} left\n * @property {space} scrollMargin\n * @property {space} scrollMarginTop\n * @property {space} scrollMarginRight\n * @property {space} scrollMarginBottom\n * @property {space} scrollMarginLeft\n * @property {space} scrollMarginX\n * @property {space} scrollMarginY\n * @property {space} scrollMarginBlock\n * @property {space} scrollMarginBlockEnd\n * @property {space} scrollMarginBlockStart\n * @property {space} scrollMarginInline\n * @property {space} scrollMarginInlineEnd\n * @property {space} scrollMarginInlineStart\n * @property {space} scrollPadding\n * @property {space} scrollPaddingTop\n * @property {space} scrollPaddingRight\n * @property {space} scrollPaddingBottom\n * @property {space} scrollPaddingLeft\n * @property {space} scrollPaddingX\n * @property {space} scrollPaddingY\n * @property {space} scrollPaddingBlock\n * @property {space} scrollPaddingBlockEnd\n * @property {space} scrollPaddingBlockStart\n * @property {space} scrollPaddingInline\n * @property {space} scrollPaddingInlineEnd\n * @property {space} scrollPaddingInlineStart\n\n * @property {fontSizes} fontSize\n\n * @property {colors} background\n * @property {colors} backgroundColor\n * @property {colors} backgroundImage\n * @property {colors} border\n * @property {colors} borderBlock\n * @property {colors} borderBlockEnd\n * @property {colors} borderBlockStart\n * @property {colors} borderBottom\n * @property {colors} borderBottomColor\n * @property {colors} borderColor\n * @property {colors} borderInline\n * @property {colors} borderInlineEnd\n * @property {colors} borderInlineStart\n * @property {colors} borderLeft\n * @property {colors} borderLeftColor\n * @property {colors} borderRight\n * @property {colors} borderRightColor\n * @property {colors} borderTop\n * @property {colors} borderTopColor\n * @property {colors} caretColor\n * @property {colors} color\n * @property {colors} columnRuleColor\n * @property {colors} fill\n * @property {colors} outline\n * @property {colors} outlineColor\n * @property {colors} stroke\n * @property {colors} textDecorationColor\n\n * @property {fonts} fontFamily\n\n * @property {fontWeights} fontWeight\n\n * @property {lineHeights} lineHeight\n\n * @property {letterSpacings} letterSpacing\n\n * @property {sizes} blockSize\n * @property {sizes} minBlockSize\n * @property {sizes} maxBlockSize\n * @property {sizes} inlineSize\n * @property {sizes} minInlineSize\n * @property {sizes} maxInlineSize\n * @property {sizes} width\n * @property {sizes} minWidth\n * @property {sizes} maxWidth\n * @property {sizes} height\n * @property {sizes} minHeight\n * @property {sizes} maxHeight\n * @property {sizes} flexBasis\n * @property {sizes} gridTemplateColumns\n * @property {sizes} gridTemplateRows\n\n * @property {borderWidths} borderWidth\n * @property {borderWidths} borderTopWidth\n * @property {borderWidths} borderRightWidth\n * @property {borderWidths} borderBottomWidth\n * @property {borderWidths} borderLeftWidth\n\n * @property {borderStyles} borderStyle\n * @property {borderStyles} borderTopStyle\n * @property {borderStyles} borderRightStyle\n * @property {borderStyles} borderBottomStyle\n * @property {borderStyles} borderLeftStyle\n\n * @property {radii} borderRadius\n * @property {radii} borderTopLeftRadius\n * @property {radii} borderTopRightRadius\n * @property {radii} borderBottomRightRadius\n * @property {radii} borderBottomLeftRadius\n\n * @property {shadows} boxShadow\n * @property {shadows} textShadow\n\n * @property {transitions} transition\n\n * @property {zIndices} zIndex\n */\n", "const stringifyReplacer = (name, data) => (typeof data === 'function' ? { '()': Function.prototype.toString.call(data) } : data)\n\nconst stringify = (value) => JSON.stringify(value, stringifyReplacer)\n\n/** @type {() => <T = any, A = any[], F = (T, ...A) => any>(value: T, apply: F, ...args: A) => ReturnType<F>} */\nexport const createMemo = () => {\n\tconst cache = Object.create(null)\n\n\treturn (value, apply, ...args) => {\n\t\tconst vjson = stringify(value)\n\n\t\treturn vjson in cache ? cache[vjson] : (cache[vjson] = apply(value, ...args))\n\t}\n}\n", "export const internal = Symbol.for('sxs.internal')\n", "/** @type {<T>(target: T, source: any) => T} */\nexport const define = (target, source) => Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))\n", "export const hasNames = (target) => {\n\tfor (const name in target) return true\n\treturn false\n}\n", "const { hasOwnProperty } = Object.prototype\n\n/** @type {<T extends object = { [key: string]: any }, K extends string = string>(target: T, key: K) => K extends keyof T ? true : false} */\nexport const hasOwn = (target, key) => hasOwnProperty.call(target, key)\n", "/** Returns the given value converted to camel-case. */\nexport const toCamelCase = (/** @type {string} */ value) => (!/[A-Z]/.test(value) ? value.replace(/-[^]/g, (capital) => capital[1].toUpperCase()) : value)\n", "/** Returns the given value converted to kebab-case. */\nexport const toHyphenCase = (/** @type {string} */ value) => (\n\t// ignore kebab-like values\n\tvalue.includes('-')\n\t\t? value\n\t// replace any upper-case letter with a dash and the lower-case variant\n\t: value.replace(/[A-Z]/g, (capital) => '-' + capital.toLowerCase())\n)\n", "const splitBySpace = /\\s+(?![^()]*\\))/\nconst split = (fn) => (data) => fn(...(typeof data === 'string' ? String(data).split(splitBySpace) : [data]))\n\nexport const toPolyfilledValue = {\n\t// prefixed properties\n\tappearance: (d) => ({ WebkitAppearance: d, appearance: d }),\n\tbackfaceVisibility: (d) => ({ WebkitBackfaceVisibility: d, backfaceVisibility: d }),\n\tbackdropFilter: (d) => ({ WebkitBackdropFilter: d, backdropFilter: d }),\n\tbackgroundClip: (d) => ({ WebkitBackgroundClip: d, backgroundClip: d }),\n\tboxDecorationBreak: (d) => ({ WebkitBoxDecorationBreak: d, boxDecoration